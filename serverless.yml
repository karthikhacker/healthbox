service: healthboxApi

frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 2048
  stage: dev
  timeout: 15
  region: us-east-1
 
# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:  
         - Effect: "Allow"
           Action:
             - "s3:PutObject"
           Resource: "arn:aws:s3:::healthbox-patient-record/*"
# bucket
resources:
  Resources:
   healthboxPatientRecord:
     Type: AWS::S3::Bucket
     Properties:
      BucketName: healthbox-patient-record
healthboxPatientRecordPolicy:
  Type: AWS::S3::BucketPolicy
  Properties: 
    bucket: healthboxPatientRecord
    PolicyDocument:
      statement:
        - Sid: PublicRead
          Effect: Allow
          Pricipal: '*'
          Action: 
            - s3: PutObject
            - s3: GetObject
          Resource: arn:aws:s3:::${healthbox-patient-record}/* 


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  api:
    handler: handler.apiHealthbox
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
       - http : ANY /{proxy+}
       - http : ANY /
    # environment: 
    #    NODE_ENV: ${env.NODE_ENV}
    #    PORT: ${env.PORT}
    #    MONGO_URL: ${env.MONGO_URL}
    #    JWT_SECRET: ${env.JWT_SECRET}
    #    JWT_TOKEN_EXPIRY: ${env.JWT_TOKEN_EXPIRY}
    #    ACCESS_KEY: ${env.ACCESS_KEY}
    #    SECRET_KEY: ${env.SECRET_KEY}
    #    REGION_S3: ${env.REGION_S3}
    #    BUCKET_NAME: ${env.BUCKET_NAME}


plugins:
      - serverless-plugin-include-dependencies
      - serverless-offline

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
